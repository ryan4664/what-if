generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  emailAddress       String               @unique @db.VarChar
  password           String               @db.VarChar
  timeShards         Int                  @default(0) @db.Integer
  currentLevel       Int                  @default(1) @db.Integer
  currentExperience  Int                  @default(0) @db.Integer
  heros              Hero[]
  TransactionHistory TransactionHistory[]
}

model Hero {
  id                  String                       @id @default(uuid()) @db.Uuid
  multiverse          String                       @unique @db.Uuid
  name                String                       @db.VarChar(250)
  userId              String                       @db.Uuid
  currentLevel        Int                          @default(1) @db.Integer
  currentExperience   Int                          @default(0) @db.Integer
  totalHealth         Int                          @default(1) @db.Integer
  currentHealth       Int                          @default(1) @db.Integer
  speed               Int                          @default(1) @db.Integer
  user                User                         @relation(fields: [userId], references: [id])
  heroAttributes      HeroAttribute[]
  HeroOneCombatResult PlayerVsPlayerCombatResult[] @relation("HeroOneRelation")
  HeroTwoCombatResult PlayerVsPlayerCombatResult[] @relation("HeroTwoRelation")
}

model HeroAttribute {
  id          String    @id @default(uuid())
  heroId      String    @db.Uuid
  attributeId String    @db.Uuid
  hero        Hero      @relation(fields: [heroId], references: [id])
  attriubute  Attribute @relation(fields: [attributeId], references: [id])
}

model Attribute {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @db.VarChar(100)
  baseDamage     Int             @default(1) @db.Integer
  heroAttributes HeroAttribute[]
  moves          AttributeMove[]
}

model AttributeMove {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @default("DefaultMoveName") @db.VarChar(250)
  attributeId String    @db.Uuid
  attriubute  Attribute @relation(fields: [attributeId], references: [id])
}

model LevelTier {
  id            String @id @default(uuid())
  level         Int    @db.Integer
  minExperience Int    @db.Integer
}

model PlayerVsPlayerCombatResult {
  id            String   @id @default(uuid())
  heroOneId     String   @db.Uuid
  heroTwoId     String   @db.Uuid
  combatDate    DateTime @default(now()) @db.Date
  winningHeroId String?  @db.Uuid
  log           Json?    @db.Json
  heroOne       Hero     @relation(fields: [heroOneId], references: [id], name: "HeroOneRelation")
  heroTwo       Hero     @relation(fields: [heroTwoId], references: [id], name: "HeroTwoRelation")
}

model TransactionHistory {
  id                 String @id @default(uuid())
  userId             String @db.Uuid
  previousTimeShards Int    @db.Integer
  timeShardsDelta    Int    @db.Integer
  updatedTimeShards  Int    @db.Integer
  transactionType    Int    @db.Integer
  user               User   @relation(fields: [userId], references: [id])
}
